FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json pnpm-lock.yaml* ./
RUN \
  if [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NODE_ENV production
ENV VITE_ENVIRONMENT production
ENV VITE_ENABLE_DEBUG false

RUN \
  if [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production stage with nginx
FROM nginx:alpine

# Copy nginx config
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Remove default nginx files
RUN rm -rf /usr/share/nginx/html/*

# Copy built assets from build stage
COPY --from=builder /app/dist /usr/share/nginx/html/

COPY pages/scripts /usr/share/nginx/html/scripts/

# Fix file permissions for nginx
RUN chmod -R 755 /usr/share/nginx/html && \
    find /usr/share/nginx/html -type f -exec chmod 644 {} \;

# Expose port
EXPOSE 9044

# Start the application with serve
CMD ["nginx", "-g", "daemon off;"]
